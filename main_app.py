
from flask import Flask, Blueprint, render_template, request, abort
import os

# Create a Blueprint with /cs as the URL prefix
cs_bp = Blueprint('cs', __name__, url_prefix='/cs')


@cs_bp.route("/")
def hello():
    return render_template("index.html")


# Create the Flask app and serve static files under the /cs prefix so
# requests like /cs/static/css/styles.css are handled by Flask.
# This ensures the stylesheet link generated by url_for('static', ...) is
# reachable when the app's routes are under the /cs blueprint prefix.
app = Flask(__name__, static_folder='static', static_url_path='/cs/static')

# Register the blueprint
app.register_blueprint(cs_bp)


# --- ShawnNoon Converter Blueprint ---
# Use the converter's own templates directory so we don't have to copy files.
converter_templates = os.path.join(os.path.dirname(__file__), 'ShawnNoon', 'Converter', 'Converter', 'templates')
shawn_converter_bp = Blueprint(
    'shawn_converter', __name__,
    url_prefix='/cs/ShawnNoon/Converter',
    template_folder=converter_templates,
)


@shawn_converter_bp.route('/', methods=['GET', 'POST'])
def shawn_converter_home():
    # Dynamically import and run the converter module's `home` view so
    # we execute the code in ShawnNoon/Converter/Converter/converter.py
    converter_path = os.path.join(os.path.dirname(__file__), 'ShawnNoon', 'Converter', 'Converter', 'converter.py')
    try:
        import importlib.util
        spec = importlib.util.spec_from_file_location('shawn_converter_module', converter_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        # Ensure the converter's templates are found by Jinja by temporarily
        # prepending the converter templates directory to the app's search path.
        converter_templates_dir = os.path.join(os.path.dirname(converter_path), 'templates')
        loader = getattr(app, 'jinja_loader', None)
        added = False
        try:
            if loader is not None and hasattr(loader, 'searchpath'):
                loader.searchpath.insert(0, converter_templates_dir)
                added = True

            # The converter module defines a view function named `home`.
            if hasattr(module, 'home'):
                return module.home()
        finally:
            # restore loader searchpath
            if added:
                try:
                    loader.searchpath.pop(0)
                except Exception:
                    pass
    except FileNotFoundError:
        abort(404)
    except Exception:
        # If the module raised, surface a 500 so the caller knows something went wrong
        from flask import abort
        abort(500)

    abort(500)


# Register the converter blueprint after defining it
app.register_blueprint(shawn_converter_bp)

if __name__ == "__main__":
    app.run(debug=True)
